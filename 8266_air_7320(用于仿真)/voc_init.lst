C51 COMPILER V9.50a   VOC_INIT                                                             04/08/2018 14:30:29 PAGE 1   


C51 COMPILER V9.50a, COMPILATION OF MODULE VOC_INIT
OBJECT MODULE PLACED IN .\hexfirmware\voc_init.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE app\voc_init.c BROWSE DEBUG OBJECTEXTEND PRINT(.\voc_init.lst) TABS(2) OBJE
                    -CT(.\hexfirmware\voc_init.obj)

line level    source

   1          #include "include\voc_init.h"
   2          
   3          extern unsigned char test_staus;
   4          
   5          /*************************************************************
   6          ËµÃ÷£º
   7          TEST==TEST_PWM
   8          1¡¢P00,P01,P02£¬P25£¬P26£¬P27ÎªPWMÊä³ö£¬FsysÆµÂÊ£¬ÖÜÆÚÎª99+1=100£»PWMDTY0Îª50£¬PWMDTY1Îª25£¬PWMDTY2Îª10£¬P
             -WMDTY3Îª50£¬PWMDTY4Îª25£¬PWMDTY5Îª10£»
   9          2¡¢PWMÆµÂÊ¼ÆËã¹«Ê½f=PWMÊ±ÖÓÔ´/£¨PWMPRD+1£©£»Õ¼¿Õ±È=PWMDTYx/£¨PWMPRD+1£©;
  10          ***************************************************************/
  11          
  12          void PWMwork(void)
  13          {
  14   1        //7320Ê¹ÓÃ
  15   1        P2CON=0XC0;
  16   1        PWMCON = 0X30;      //PWM1\PWM2Êä³öµ½I/O£¬FsysÆµÂÊ£»PWM0\²»Êä³ö
  17   1        PWMCFG = 0x06;      //²»·´Ïò£¬P00,P01,P02Êä³ö pwm1 Êä³öµ½2.6 PWM2 Êä³öµ½2.7
  18   1        PWMPRD = 199;     //PWMÖÜÆÚ=(99+1)       
  19   1       // PWMDTY0 = 50;     //PWM0µÄDuty = 50/100  =1/2
  20   1        PWMDTY1 = 200;//25;     //PWM1µÄDuty = 25/100  =1/4 
  21   1        PWMDTY2 = 200;//10;     //PWM2µÄDuty = 10/100  =1/10
  22   1        //PWMDTYA = 0x15;     //PWM2/PWM1/PWM0 dutyÎ¢µ÷£¬ÎªPWMDTYÉè¶¨Öµ¼Ó1
  23   1        PWMCON |= 0x80;     //¿ªÊ¼PWM¹¤×÷
  24   1        
  25   1        
  26   1      
  27   1        /*7350Ê¹ÓÃ
  28   1        PWMCON  = 0X00;   //PWM0\PWM1\PWM2²»Êä³öµ½I/O£¬Ê§ÄÜ£¬Ñ¡ÔñFsysÆµÂÊ£»
  29   1        PWMCFG0 = 0x06;   //PWM0\PWM1\PWM2²»·´Ïò£¬PWM4\PWM5Êä³öµ½I/O PWM3\²»Ê¹ÄÜ
  30   1        PWMCFG1 = 0x00;   //PWM3\PWM4\PWM5²»·´Ïò
  31   1        PWMPRD  = 99;     //PWMÖÜÆÚ=(99+1)       
  32   1        //PWMDTY0 = 50;     //PWM0µÄDuty = 50/100  =1/2
  33   1        //PWMDTY1 = 25;     //PWM1µÄDuty = 25/100  =1/4
  34   1        //PWMDTY2 = 10;     //PWM2µÄDuty = 10/100  =1/10
  35   1        //PWMDTY3 = 50;     //PWM3µÄDuty = 50/100  =1/2
  36   1        //PWMDTY4 = 25;     //PWM4µÄDuty = 25/100  =1/4
  37   1        //PWMDTY5 = 10;     //PWM5µÄDuty = 10/100  =1/10
  38   1        PWMCON |= 0x80;   //Æô¶¯PWM¹¤×÷
  39   1        IE1 |= 0x02;      //¿ªÆôPWMÖÐ¶Ï
  40   1        */
  41   1      }
  42          
  43          /*************************************************************
  44          ËµÃ÷£º
  45          ¿ØÖÆLED ÁÁ¶È PWM1¡¢2 ÊÇÓÃÔÚ7320ÉÏ  ÈôÐèÓÃ7250 ÔòÊÇPWM4¡¢5
  46          ***************************************************************/
  47          
  48          void LED_Ctrl(unsigned char duty,unsigned char no)
  49          {
  50   1        switch(no)
  51   1        {
  52   2          case GREEN: PWMDTY1 = duty;
  53   2          
C51 COMPILER V9.50a   VOC_INIT                                                             04/08/2018 14:30:29 PAGE 2   

  54   2          break;
  55   2          case RED: PWMDTY2 = duty;
  56   2          
  57   2          break;
  58   2          case BLUE:if(duty == 0)P1 = 0x00;//¿ªµÆ
  59   2                    else P1 = 0x04;//¹ØµÆ
  60   2          
  61   2          break;
  62   2        }
  63   1      }
  64          
  65          /*************************************************************
  66          ËµÃ÷£º
  67          TEST==TEST_ADC
  68          1¡¢ADCworkµÄ²ÎÊý°üÀ¨£¨ÊäÈëÍ¨µÀAIN0~AIN9»ò²âÁ¿1/4VDDµçÑ¹VDD_DIV4£¬²ÉÑùËÙ¶ÈÌî0Îª2M£¬Ìî1Îª333K£©
  69          0~50 ±íÊ¾ 0~5.0V
  70          ***************************************************************/
  71          
  72          
  73          
  74          unsigned long ADCwork(unsigned char Channel,unsigned char Clk)
  75          {
  76   1        unsigned int SetAdcIo; 
  77   1        unsigned long AdcValue;
  78   1        ADCCON   = ADCCON & (~0X1F) | Channel | (Clk<<5) ;  //ÅäÖÃADCÊäÈëÍ¨µÀºÍ²É¼¯Ê±ÖÓÆµÂÊ
  79   1        ADCCON|=0x80;                  //´ò¿ªADCÄ£¿éµçÔ´
  80   1        SetAdcIo = (0x0001 << Channel) & (~0Xfe00) ;   
  81   1        ADCCFG0  = (unsigned char)SetAdcIo;        //ÅäÖÃÎªADCÊäÈë
  82   1        ADCCFG1  = (unsigned char)(SetAdcIo >> 8);
  83   1      
  84   1        ADCCON|=0x40;              //Æô¶¯ADC²É¼¯
  85   1        while(!(ADCCON&0x10));               //µÈ´ý ADC×ª»»Íê³É;
  86   1        AdcValue=(ADCVH<<4)+(ADCVL>>4);
  87   1        
  88   1        return (AdcValue * 50/4095);
  89   1      }
  90          
  91          
  92          /*************************************************************
  93          ËµÃ÷£º
  94          TEST==TEST_TIMER
  95          1¡¢¶¨Ê±Æ÷ÎªÏòÉÏÒç³ö·½Ê½£¬T¶¨Ê±¼ÆËã¹«Ê½=TxÊ±ÖÓÔ´*£¨ÂúÁ¿³ÌÖµ+1-Ô¤×°ÔØÖµ£©
  96          ***************************************************************/
  97          
  98          #define   tst0    P00
  99          
 100          void Timerwork(void)
 101          {
 102   1        TMCON=0x07;             //------111 ;Timer0¡¢Tiemr1ºÍTiemr2Ñ¡ÔñÊ±ÖÓFsys
 103   1        TMOD=0x31;              //0011 0001  ;Timer0¹¤×÷·½Ê½1 Timer1 ²»¹¤×÷  16Î»¼ÆÊýÆ÷
 104   1      //T0ÉèÖÃ  
 105   1        // 0x4480
 106   1        TH0= (65536 - 48000)/256;           //Èç¹ûÖ÷ÆµÎª24MºÍÊ±ÖÓFsysÔò24M*48000= 2ms;   
 107   1        TL0= (65536 - 48000)%256;             //TH0= 0x44; TL0 = 0x80; Ò²¿ÉÒÔÕâÑùÐ´
 108   1        TR0=0;          
 109   1        ET0=1;                //Timer0Ê¹ÄÜ
 110   1        TR0=1;                //Æô¶¯Timer0
 111   1        
 112   1        EA=1;
 113   1      }
 114          
 115          void timer0()interrupt 1        //Timer0ÏòÁ¿ºÅ 1  2ms½øÈëÒ»´ÎÖÐ¶Ï
C51 COMPILER V9.50a   VOC_INIT                                                             04/08/2018 14:30:29 PAGE 3   

 116          {
 117   1        WDTCON |= 0x10;       //Çå¿´ÃÅ¹·  
 118   1        
 119   1        TH0= (65536 - 48000)/256;           //ÔÙ´Î×°Èë³õÖµ 
 120   1        TL0= (65536 - 48000)%256;   
 121   1        if(++Cnt_10ms >= 5 && (flag_10ms == 0))
 122   1        {
 123   2          Cnt_10ms = 0;
 124   2          flag_10ms = 1;
 125   2        }
 126   1        tst0 =~tst0;
 127   1      }
 128          
 129          
 130          
 131          /*************************************************************
 132          ËµÃ÷£º
 133          
 134          1¡¢key¼ì²â
 135          ***************************************************************/
 136          void KeyPress(void)
 137          {
 138   1        static unsigned int Cnt_key = 0;
 139   1        static unsigned int Cnt_KeyUP = 0;
 140   1        static unsigned char flag_keyup = 0;
 141   1        //p2.1
 142   1        if((P2 & 0x02) == 0x00)//°´¼ü°´ÏÂ
 143   1        {
 144   2          Cnt_key ++;
 145   2        }
 146   1        else
 147   1        {
 148   2          if(Cnt_key >4 && Cnt_key < 50)
 149   2          {
 150   3            flag_keyup ++;
 151   3          }
 152   2          
 153   2          if(flag_keyup)
 154   2          {
 155   3            Cnt_KeyUP ++;
 156   3          }
 157   2          if(flag_keyup == 3 && Cnt_KeyUP > 50)
 158   2          {//Èç¹ûÁ¬°´Èý´Î
 159   3              test_staus = 0;
 160   3              Cnt_KeyUP = 0;
 161   3              flag_keyup = 0;
 162   3              LED_Ctrl(200,GREEN);
 163   3              LED_Ctrl(200,RED);
 164   3              LED_Ctrl(200,BLUE);
 165   3              BC(ProgramPara.flag_Time,0);
 166   3              ProgramPara.Cnt_Minite = 0;
 167   3              ProgramPara.SubMode = 0x03; //Mode_Test
 168   3      
 169   3          }
 170   2          if(flag_keyup != 1 && flag_keyup != 3 && Cnt_KeyUP > 50)
 171   2          {
 172   3              flag_keyup = 0;
 173   3              Cnt_KeyUP = 0;
 174   3          }
 175   2          Cnt_key = 0;
 176   2        }
 177   1      }
C51 COMPILER V9.50a   VOC_INIT                                                             04/08/2018 14:30:29 PAGE 4   

 178          
 179          /*************************************************************
 180          ËµÃ÷£º
 181          1¡¢ÄÚ²¿ÓÐ128BYTEµÄEEPROM¿ÉÒÔ´æÊý¾Ý¡£
 182          ***************************************************************/
 183          
 184          
 185          unsigned char ReadData;
 186          
 187          void EepromWrite(unsigned char Data,unsigned int Addr,unsigned char eHoldtimer)   //DataÎªÐ´ÈëÊý¾Ý£¬AddrÎªÐ
             -´ÈëµØÖ·£¬eHoldtimerÎªÐ´ÈëÊ±¼ä£»
 188          {
 189   1        IAPDAT = Data;                              //ÅäÖÃÐ´ÈëÊý¾Ý
 190   1        IAPADH = (unsigned char)((Addr >> 8));                   //ÅäÖÃÐ´ÈëµØÖ·
 191   1        IAPADL = (unsigned char)Addr;
 192   1        EA=0;                                  //ÏÈ¹Ø×ÜÖÐ¶Ï
 193   1        IAPADE = MOVC_EEPROM;                          //MOVCÖ¸ÏòEEPROM
 194   1        IAPKEY = 240 ;
 195   1        IAPCTL = eHoldtimer;                           //Æô¶¯Ð´Èë
 196   1          _nop_();                                 //ÖÁÉÙ²åÈë4¸ö_nop_();ÒÔÉÏ
 197   1          _nop_();
 198   1          _nop_();
 199   1          _nop_();
 200   1          _nop_();
 201   1        IAPADE = MOVC_ROM;                             //MOVCÖ¸ÏòROM
 202   1        EA=1;                                    //¿ª×ÜÖÐ¶Ï
 203   1      }
 204          
 205          unsigned char EepromRead(unsigned char Addr)
 206          {
 207   1        unsigned char code *IapAddr=0x00;               //ÅäÖÃ¶ÁµÄ³õÊ¼Ö¸Õë
 208   1        unsigned char Temp;
 209   1        EA=0;                             //ÏÈ¹Ø×ÜÖÐ¶Ï
 210   1        IAPADE = MOVC_EEPROM;                     //MOVCÖ¸ÏòEEPROM
 211   1        Temp = *(IapAddr+Addr);                     //¶ÁAddrµØÖ·µÄÊý¾Ý
 212   1        IAPADE = MOVC_ROM;                        //MOVCÖ¸ÏòROM
 213   1        EA=1;                             //¿ª×ÜÖÐ¶Ï
 214   1        return Temp;
 215   1      }
 216          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    411    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
